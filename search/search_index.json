{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome This is a place for community-driven Canvas shader development guides.","title":"Welcome"},{"location":"#welcome","text":"This is a place for community-driven Canvas shader development guides.","title":"Welcome"},{"location":"pipeline/fabulous_pipeline/","text":"Fabulous Pipeline Assign buffers, generally you want to assign the main buffer to the \"solid\".","title":"Fabulous Pipeline"},{"location":"pipeline/fabulous_pipeline/#fabulous-pipeline","text":"Assign buffers, generally you want to assign the main buffer to the \"solid\".","title":"Fabulous Pipeline"},{"location":"pipeline/making_a_pipeline/","text":"Making a Pipeline To get started, let's create a basic Pipeline. Start by creating an empty resource pack. This will be the blank canvas for our Pipeline. Note: everything prefixed with \"my_\" implies any custom name will work. .minecraft/resourcepacks/my_pack/ Create the assets folder and a namespace folder inside it: .minecraft/resourcepacks/my_pack/assets/ .minecraft/resourcepacks/my_pack/assets/my_namespace/ Create a pipelines folder inside the namespace folder: .minecraft/resourcepacks/my_pack/assets/my_namespace/pipelines/ Then inside the pipelines folder, create your Pipeline json5 file: .minecraft/resourcepacks/my_pack/assets/my_namespace/pipelines/my_pipeline.json5 Then, before creating the Pipeline file, generally you want to decide whether to enable Fabulous mode or not. Mode Description without Fabulous mode Faster; All render targets the solid buffer; No composite pass. with Fabulous mode Slightly slower; Separate buffer for each target; Fabulous composite pass. Basic Pipeline Since Canvas ships with a non-fabulous Pipeline called \"Canvas Basic\", we'll call non-fabulous Pipelines \"basic\" Pipelines. To create a basic pipeline, insert the following into your Pipeline json5 file: Fabulous Pipeline Language files","title":"Making a Pipeline"},{"location":"pipeline/making_a_pipeline/#making-a-pipeline","text":"To get started, let's create a basic Pipeline. Start by creating an empty resource pack. This will be the blank canvas for our Pipeline. Note: everything prefixed with \"my_\" implies any custom name will work. .minecraft/resourcepacks/my_pack/ Create the assets folder and a namespace folder inside it: .minecraft/resourcepacks/my_pack/assets/ .minecraft/resourcepacks/my_pack/assets/my_namespace/ Create a pipelines folder inside the namespace folder: .minecraft/resourcepacks/my_pack/assets/my_namespace/pipelines/ Then inside the pipelines folder, create your Pipeline json5 file: .minecraft/resourcepacks/my_pack/assets/my_namespace/pipelines/my_pipeline.json5 Then, before creating the Pipeline file, generally you want to decide whether to enable Fabulous mode or not. Mode Description without Fabulous mode Faster; All render targets the solid buffer; No composite pass. with Fabulous mode Slightly slower; Separate buffer for each target; Fabulous composite pass.","title":"Making a Pipeline"},{"location":"pipeline/making_a_pipeline/#basic-pipeline","text":"Since Canvas ships with a non-fabulous Pipeline called \"Canvas Basic\", we'll call non-fabulous Pipelines \"basic\" Pipelines. To create a basic pipeline, insert the following into your Pipeline json5 file:","title":"Basic Pipeline"},{"location":"pipeline/making_a_pipeline/#fabulous-pipeline","text":"","title":"Fabulous Pipeline"},{"location":"pipeline/making_a_pipeline/#language-files","text":"","title":"Language files"},{"location":"pipeline/material_program/","text":"","title":"Material program"},{"location":"pipeline/what_is_pipeline/","text":"What is a Pipeline? Canvas Pipeline is a configurable set of shader program and passes with the capability of shading the full game as well as GUI items. Additionally, a Pipeline also enables specific rendering features such as shadows, post-processing, and PBR (work in progress). What is a material shader? Game objects like terrain, entities, and particles are rendered with materials. Therefore the program used to render them is known as the Material Program. The Material Program is controlled by the Pipeline, but it may be extended by mods and resource packs via material shaders. To put it simply, material shaders control the early part of object rendering before it's being passed over to the Pipeline. There is also the depth-pass shader, which works like material shader but for shadow pass. For more details, see the Material Program and Material Shader sections. (TODO) What is a shader pack? In the past, custom Minecraft shaders are distributed as .zip files called \"shader pack\" (or simply \"shader\"). This holds true to this day. However, Canvas shaders are distributed as resource packs . These resource packs may contain: - One or more Pipeline(s), - Material shaders, - Material maps, - Language files, textures, and other common resources. As Canvas packs contain shaders, it makes sense to call them \"shader pack\" as well.","title":"What is a Pipeline?"},{"location":"pipeline/what_is_pipeline/#what-is-a-pipeline","text":"Canvas Pipeline is a configurable set of shader program and passes with the capability of shading the full game as well as GUI items. Additionally, a Pipeline also enables specific rendering features such as shadows, post-processing, and PBR (work in progress).","title":"What is a Pipeline?"},{"location":"pipeline/what_is_pipeline/#what-is-a-material-shader","text":"Game objects like terrain, entities, and particles are rendered with materials. Therefore the program used to render them is known as the Material Program. The Material Program is controlled by the Pipeline, but it may be extended by mods and resource packs via material shaders. To put it simply, material shaders control the early part of object rendering before it's being passed over to the Pipeline. There is also the depth-pass shader, which works like material shader but for shadow pass. For more details, see the Material Program and Material Shader sections. (TODO)","title":"What is a material shader?"},{"location":"pipeline/what_is_pipeline/#what-is-a-shader-pack","text":"In the past, custom Minecraft shaders are distributed as .zip files called \"shader pack\" (or simply \"shader\"). This holds true to this day. However, Canvas shaders are distributed as resource packs . These resource packs may contain: - One or more Pipeline(s), - Material shaders, - Material maps, - Language files, textures, and other common resources. As Canvas packs contain shaders, it makes sense to call them \"shader pack\" as well.","title":"What is a shader pack?"}]}